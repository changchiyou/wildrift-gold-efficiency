name: Auto Update Wild Rift Patch

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    # Allow manual triggering

env:
  RSS_URL: "https://changchiyou.github.io/wildrift-news-feeds/wildrift-news-en-us.xml"

jobs:
  check-for-updates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        pip install requests markdownify
        
    - name: Check for new patch version
      id: check-patch
      run: |
        # Download and parse RSS feed
        RSS_CONTENT=$(curl -s "$RSS_URL")
        
        # Extract URLs with game-updates and patch-notes (clean URLs only)
        PATCH_URLS=$(echo "$RSS_CONTENT" | grep -o 'href="https://wildrift\.leagueoflegends\.com/[^"]*game-updates[^"]*patch-notes[^"]*"' | sed 's/href="//g' | sed 's/"//g' | head -5)
        
        echo "Found patch URLs:"
        echo "$PATCH_URLS"
        
        # Process each URL to extract version
        for URL in $PATCH_URLS; do
          echo "Processing URL: $URL"
          
          # Extract version from URL pattern like "wild-rift-patch-notes-6-2e"
          VERSION=$(echo "$URL" | grep -o 'patch-notes-[0-9]-[0-9][a-z]*' | sed 's/patch-notes-//' | sed 's/-/./')
          
          if [ -z "$VERSION" ]; then
            echo "Could not extract version from URL: $URL"
            continue
          fi
          
          echo "Extracted version: $VERSION"
          
          # Convert version format for checking (6.2e -> 6_2e)
          VERSION_UNDERSCORE=$(echo "$VERSION" | sed 's/\./_/')
          
          # Check if this version already exists in _pages
          if [ -d "_pages/$VERSION_UNDERSCORE" ]; then
            echo "Version $VERSION already exists in _pages/$VERSION_UNDERSCORE"
            continue
          fi
          
          # Check if this version already exists in _data
          if [ -f "_data/items_$VERSION_UNDERSCORE.yml" ]; then
            echo "Version $VERSION already exists in _data/items_$VERSION_UNDERSCORE.yml"
            continue
          fi
          
          echo "New version found: $VERSION"
          echo "new_version=$VERSION" >> $GITHUB_OUTPUT
          echo "patch_url=$URL" >> $GITHUB_OUTPUT
          exit 0
        done
        
        echo "No new versions found"
        exit 1
        
    - name: Update to new version with Claude Code
      if: steps.check-patch.outputs.new_version
      uses: anthropics/claude-code-action@v1.0
      with:
        anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
        prompt: |
          Update to the latest version ${{ steps.check-patch.outputs.new_version }} with the following information from the latest patch note: $(python patch_notes_extractor.py "${{ steps.check-patch.outputs.patch_url }}")
        
    - name: Create Pull Request
      if: steps.check-patch.outputs.new_version
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NEW_VERSION: ${{ steps.check-patch.outputs.new_version }}
        PATCH_URL: ${{ steps.check-patch.outputs.patch_url }}
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create new branch
        BRANCH_NAME="auto-update-patch-$NEW_VERSION"
        git checkout -b "$BRANCH_NAME"
        
        # Add all changes
        git add .
        
        # Check if there are changes to commit
        if git diff --cached --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Get the diff between latest and previous items files
        VERSION_UNDERSCORE=$(echo "$NEW_VERSION" | sed 's/\./_/')
        LATEST_ITEMS="_data/items_$VERSION_UNDERSCORE.yml"
        
        # Find the previous version (second latest)
        PREVIOUS_ITEMS=$(ls _data/items_*.yml | grep -v "$LATEST_ITEMS" | sort -V | tail -1)
        
        if [ -f "$LATEST_ITEMS" ] && [ -f "$PREVIOUS_ITEMS" ]; then
          echo "Comparing $PREVIOUS_ITEMS with $LATEST_ITEMS"
          DIFF_OUTPUT=$(git diff --no-index "$PREVIOUS_ITEMS" "$LATEST_ITEMS" || true)
        else
          DIFF_OUTPUT="Could not generate diff: files not found
Latest: $LATEST_ITEMS (exists: $(test -f "$LATEST_ITEMS" && echo "yes" || echo "no"))
Previous: $PREVIOUS_ITEMS (exists: $(test -f "$PREVIOUS_ITEMS" && echo "yes" || echo "no"))"
        fi
        
        # Commit changes
        git commit -m "chore: auto-update to Wild Rift patch $NEW_VERSION

ðŸ¤– Generated with Claude Code

Co-Authored-By: Claude <noreply@anthropic.com>"
        
        # Push branch
        git push origin "$BRANCH_NAME"
        
        # Create PR with diff in body
        gh pr create \
          --title "Auto-update to Wild Rift patch $NEW_VERSION" \
          --body "## Summary

- Automated update to Wild Rift patch version $NEW_VERSION
- Items data updated based on latest patch notes

## Changes to items data:

\`\`\`diff
$DIFF_OUTPUT
\`\`\`

## Source
Patch notes: $PATCH_URL

ðŸ¤– Generated with Claude Code" \
          --head "$BRANCH_NAME" \
          --base main
name: Auto Update Wild Rift Patch

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    # Allow manual triggering

env:
  RSS_URL: "${{ vars.RSS_URL }}"

jobs:
  check-for-updates:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python and install dependencies
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: '**/requirements.txt'
    - run: pip install -r requirements.txt

    - name: Check for new patch version
      id: check-patch
      run: |
        # Download and parse RSS feed
        RSS_CONTENT=$(curl -s "$RSS_URL")

        # Extract URLs with game-updates and patch-notes (clean URLs only)
        PATCH_URLS=$(echo "$RSS_CONTENT" | grep -o 'href="https://wildrift\.leagueoflegends\.com/[^"]*game-updates[^"]*patch-notes[^"]*"' | sed 's/href="//g' | sed 's/"//g' | head -5)

        echo "Found patch URLs:"
        echo "$PATCH_URLS"

        # Process each URL to extract version
        for URL in $PATCH_URLS; do
          echo "Processing URL: $URL"

          # Extract version from URL pattern like "wild-rift-patch-notes-6-2e"
          VERSION=$(echo "$URL" | grep -o 'patch-notes-[0-9]-[0-9][a-z]*' | sed 's/patch-notes-//' | sed 's/-/./')

          if [ -z "$VERSION" ]; then
            echo "Could not extract version from URL: $URL"
            continue
          fi

          echo "Extracted version: $VERSION"

          # Convert version format for checking (6.2e -> 6_2e)
          VERSION_UNDERSCORE=$(echo "$VERSION" | sed 's/\./_/')

          # Check if this version already exists in _pages
          if [ -d "_pages/$VERSION_UNDERSCORE" ]; then
            echo "Version $VERSION already exists in _pages/$VERSION_UNDERSCORE"
            continue
          fi

          # Check if this version already exists in _data
          if [ -f "_data/items_$VERSION_UNDERSCORE.yml" ]; then
            echo "Version $VERSION already exists in _data/items_$VERSION_UNDERSCORE.yml"
            continue
          fi

          echo "New version found: $VERSION"
          echo "new_version=$VERSION" >> $GITHUB_OUTPUT
          echo "new_version_underscore=$VERSION_UNDERSCORE" >> $GITHUB_OUTPUT
          echo "patch_url=$URL" >> $GITHUB_OUTPUT
          exit 0
        done

        echo "No new versions found"
        exit 0

    - uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Find previous version
      if: steps.check-patch.outputs.new_version
      id: find-previous
      run: |
        # Find the previous version (most recent existing version)
        PREVIOUS_ITEMS=$(ls _data/items_*.yml | sort -V | tail -1)
        PREVIOUS_VERSION=$(basename "$PREVIOUS_ITEMS" .yml | sed 's/items_//' | sed 's/_/\./')

        echo "Found previous version: $PREVIOUS_VERSION"
        echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
        echo "previous_items_file=$PREVIOUS_ITEMS" >> $GITHUB_OUTPUT

    - name: Install and configure Claude Code
      if: steps.check-patch.outputs.new_version
      run: |
          npm install -g @anthropic-ai/claude-code

          mkdir -p ~/.claude

          cat > ~/.claude/settings.json << 'EOF'
          {
            "env": {
              "ANTHROPIC_BASE_URL": "${{ vars.ANTHROPIC_BASE_URL }}",
              "ANTHROPIC_AUTH_TOKEN": "${{ secrets.ANTHROPIC_AUTH_TOKEN }}",
              "ANTHROPIC_MODEL": "${{ vars.ANTHROPIC_MODEL }}",
              "ANTHROPIC_SMALL_FAST_MODEL": "gpt-4.1-nano",
              "DISABLE_NON_ESSENTIAL_MODEL_CALLS": 1
            }
          }
          EOF

    - name: Update to new version with Claude Code
      if: steps.check-patch.outputs.new_version
      run: |
          claude -p "Update from version ${{ steps.find-previous.outputs.previous_version }} to the latest version ${{ steps.check-patch.outputs.new_version }} with the following information from the latest patch note: $(python patch_notes_extractor.py \"${{ steps.check-patch.outputs.patch_url }}\")" --dangerously-skip-permissions

    - name: Generate diff report
      if: steps.check-patch.outputs.new_version
      id: generate-diff
      run: |
        # Get the diff between latest and previous items files
        VERSION_UNDERSCORE="${{ steps.check-patch.outputs.new_version_underscore }}"
        LATEST_ITEMS="_data/items_$VERSION_UNDERSCORE.yml"

        # Use the previous version found earlier
        PREVIOUS_ITEMS="${{ steps.find-previous.outputs.previous_items_file }}"

        if [ -f "$LATEST_ITEMS" ] && [ -f "$PREVIOUS_ITEMS" ]; then
          echo "Comparing $PREVIOUS_ITEMS with $LATEST_ITEMS"
          DIFF_OUTPUT=$(git diff --no-index "$PREVIOUS_ITEMS" "$LATEST_ITEMS" || true)
        else
          DIFF_OUTPUT="Could not generate diff: files not found\nLatest: $LATEST_ITEMS (exists: $(test -f "$LATEST_ITEMS" && echo "yes" || echo "no"))\nPrevious: $PREVIOUS_ITEMS (exists: $(test -f "$PREVIOUS_ITEMS" && echo "yes" || echo "no"))"
        fi

        # Set the diff output as a step output (properly escaped)
        {
          echo 'diff_output<<EOF'
          echo "$DIFF_OUTPUT"
          echo 'EOF'
        } >> $GITHUB_OUTPUT

    - name: Create Pull Request
      if: steps.check-patch.outputs.new_version
      id: cpr
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "$(cat <<'EOF'
          chore: auto-update to Wild Rift patch ${{ steps.check-patch.outputs.new_version }}

          ðŸ¤– Generated with Claude Code

          Co-Authored-By: Claude <noreply@anthropic.com>
          EOF
          )"
        committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
        author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
        signoff: false
        branch: auto-update-patch-${{ steps.check-patch.outputs.new_version_underscore }}
        delete-branch: true
        title: 'Auto-update to Wild Rift patch ${{ steps.check-patch.outputs.new_version }}'
        body: |
          ## Summary

          - Automated update to Wild Rift patch version ${{ steps.check-patch.outputs.new_version }}
          - Items data updated based on latest patch notes

          <details>
          <summary>Changes of items data between ${{ steps.find-previous.outputs.previous_version }} and ${{ steps.check-patch.outputs.new_version }}</summary>

          ```diff
          ${{ steps.generate-diff.outputs.diff_output }}
          ```
          </details>

          ## Source
          Patch notes: ${{ steps.check-patch.outputs.patch_url }}

          ðŸ¤– Generated with Claude Code
        labels: |
          patch-update
        draft: false
        base: main
